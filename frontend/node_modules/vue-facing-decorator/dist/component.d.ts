import { ComponentCustomOptions } from 'vue';
import { WatchConfig } from './option/watch';
import { PropsConfig } from './option/props';
import { InjectConfig } from './option/inject';
export interface OptionBuilder {
    name?: string;
    data?: Record<string, any>;
    methods?: Record<string, Function>;
    lifecycle?: Record<string, Function>;
    computed?: Record<string, any>;
    watch?: Record<string, WatchConfig>;
    props?: Record<string, PropsConfig>;
    inject?: Record<string, InjectConfig>;
    beforeCreateCallbacks?: Function[];
}
export interface Cons {
    new (): any;
    prototype: any;
}
declare function ComponentOption(cons: Cons, extend?: any): any;
declare type ComponentOption = {
    name?: string;
    emits?: string[];
    provide?: Record<string, any> | Function;
    components?: Record<string, any>;
    directives?: Record<string, any>;
    inheritAttrs?: boolean;
    expose?: string[];
    render?: Function;
    modifier?: (raw: any) => any;
    options?: ComponentCustomOptions & Record<string, any>;
    template?: string;
    mixins?: any[];
};
declare type ComponentConsOption = Cons | ComponentOption;
export declare function ComponentBase(arg: ComponentConsOption): any;
export declare function Component(arg: ComponentConsOption): any;
export {};
//# sourceMappingURL=component.d.ts.map